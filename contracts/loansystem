I'll help analyze the current system and outline a comprehensive plan for implementing non/partial collateral loans based on the savings history and additional trust mechanisms. Let's break this down systematically:

Current System Analysis:
1. Users build savings streaks by consistently depositing (minimum 10 DAI)
2. Partners can match savings up to 150%
3. The system tracks user reliability through:
   - Streak count and best streak
   - KYC verification
   - Total savings amount
   - Match participation history

Proposed Non-Collateral Loan System:

1. Qualification Criteria:
- Primary Requirements:
  - Minimum 6-month consistent savings streak
  - At least 3 successful match participations
  - KYC verification completed
  - No withdrawal history in the last 3 months
  - Regular deposits meeting or exceeding their stated savings goal

- Scoring System (0-100):
  - Savings Streak Length: 30 points max
  - Match Participation: 20 points max
  - Deposit Consistency: 20 points max
  - Withdrawal Behavior: 15 points max
  - Goal Achievement: 15 points max

2. Guarantor System:
- Required Components:
  - Primary Guarantor (mandatory):
    - Must be KYC verified
    - Minimum 1-year platform history
    - Minimum balance of 2x the loan amount
    - Clean platform record
  
  - Secondary Guarantor (optional but improves terms):
    - Same requirements as primary
    - Reduces interest rate by 2%
    - Increases maximum loan amount by 25%

3. Loan Terms Structure:
- Loan Limits:
  - First-time: Maximum 50% of total savings history
  - Subsequent: Up to 150% of savings with perfect repayment
  - Emergency: Up to 200% with both guarantors

- Partial Collateral Options:
  - 0% collateral: Base interest rate + 5%
  - 25% collateral: Base interest rate + 3%
  - 50% collateral: Base interest rate + 1%
  - Collateral held in smart contract escrow

4. Risk Management:
- Multi-layered Security:
  - Smart contract automated repayments
  - Guarantor stake locking
  - Insurance pool funded by loan fees
  - Graduated loan limits
  - Credit score impact

5. Repayment Structure:
- Flexible Options:
  - Weekly micropayments
  - Monthly standard payments
  - Income-based repayment
  - Grace period for students

- Incentives:
  - Early repayment bonuses
  - Interest reduction for perfect payment history
  - Additional credit score points for consistent payments

6. Implementation Plan:

Phase 1: Core Infrastructure
1. Smart Contract Updates:
```solidity
struct LoanApplication {
    address borrower;
    address primaryGuarantor;
    address secondaryGuarantor;
    uint256 requestedAmount;
    uint256 collateralAmount;
    uint256 creditScore;
    uint256 applicationTime;
    LoanStatus status;
}

struct Guarantor {
    bool isVerified;
    uint256 lockedStake;
    uint256 guaranteeLimit;
    uint256 activeGuarantees;
    uint256 successfulGuarantees;
}

struct LoanAccount {
    uint256 principal;
    uint256 interestRate;
    uint256 collateral;
    uint256 startTime;
    uint256 endTime;
    uint256 lastPaymentTime;
    RepaymentSchedule schedule;
    LoanStatus status;
}
```

Phase 2: Credit Assessment System
1. Credit Score Calculator:
```solidity
function calculateCreditScore(address user) internal view returns (uint256) {
    User storage userData = users[user];
    
    uint256 streakScore = (userData.streakCount * 30) / maxStreakThreshold;
    uint256 matchScore = (getUserSuccessfulMatches(user) * 20) / maxMatchThreshold;
    uint256 depositScore = calculateDepositConsistency(user);
    uint256 withdrawalScore = calculateWithdrawalBehavior(user);
    uint256 goalScore = calculateGoalAchievement(user);
    
    return streakScore + matchScore + depositScore + withdrawalScore + goalScore;
}
```

Phase 3: Risk Management Implementation:
```solidity
contract LoanInsurancePool {
    uint256 public totalPool;
    uint256 public coverageRatio = 150; // 150% coverage
    mapping(address => uint256) public insuranceClaims;
    
    function calculatePremium(uint256 loanAmount, uint256 creditScore) 
        public 
        view 
        returns (uint256) 
    {
        return (loanAmount * (100 - creditScore) * premiumRate) / 10000;
    }
}
```

7. Future Enhancements:

A. Dynamic Risk Assessment:
- Machine learning integration for risk scoring
- Behavioral analysis of savings patterns
- Network effect analysis of guarantors
- Academic performance integration for students

B. Community Features:
- Peer endorsements
- Community-based guarantor pools
- Social proof mechanisms
- Academic institution partnerships

C. Additional Security Measures:
- Multi-sig approvals for large loans
- Timelock periods for guarantor changes
- Regular credit score updates
- Automated risk assessment adjustments

8. Required Smart Contract Updates:

A. New Interfaces:
```solidity
interface ILoanAssessment {
    function assessCreditworthiness(
        address user,
        uint256 requestedAmount
    ) external view returns (
        uint256 creditScore,
        uint256 maxLoanAmount,
        uint256 interestRate
    );
}

interface IGuarantorRegistry {
    function registerGuarantor(
        address guarantor,
        uint256 stake
    ) external returns (bool);
    
    function validateGuarantor(
        address guarantor,
        uint256 loanAmount
    ) external view returns (bool);
}
```

Would you like me to elaborate on any of these aspects or provide more specific implementation details for any particular component?